#!/bin/bash

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF
Usage: ./configure [options]

Help:
  -h, --help               print this message

Standard options:
  --prefix=PREFIX          install architecture-independent files in PREFIX
                           [/usr/local]
  --exec-prefix=EPREFIX    install architecture-dependent files in EPREFIX
                           [PREFIX]
  --bindir=DIR             install binaries in DIR [EPREFIX/bin]
  --libdir=DIR             install libs in DIR [EPREFIX/lib/avxsynth]
  --pcdir=DIR              install pkg-config files in DIR [EPREFIX/lib/pkgconfig]
  --includedir=DIR         install includes in DIR [PREFIX/include/avxsynth]
  --extra-cflags=ECFLAGS   add ECFLAGS to CFLAGS
  --extra-ldflags=ELDFLAGS add ELDFLAGS to LDFLAGS

Configuration options:
  --disable-autocrop       disable building of autocrop plugin
  --disable-framecapture   disable building of framecapture plugin [requires libjpeg]
  --disable-subtitle       disable building of subtitle plugin
  --disable-ffms2          disable building of ffms2 plugin [requires ffms2, libav]
  --disable-frameserver    disable building of frameserver application
  --disable-avxedit        disable building of Qt GUI [requires Qt4]

Cross-compilation:
  --host=HOST              build programs to run on HOST
  --cross-prefix=PREFIX    use PREFIX for compilation tools
  --sysroot=SYSROOT        root of cross-build tree

Extra compiler options:
  --disable-debug          don't add -g
  --enable-strip           add -s

Dependencies are located automatically with pkg-config.
Cross-compilers are advised to install the relevant wrapper for their cross-prefix
(e.g. i386-linux-gnu-pkg-config) and/or set PKG_CONFIG_PATH appropriately.

EOF
exit 1
fi

# most of these are not used, but they may be useful later
log_check() {
    echo -n "checking $1... " >> config.log
}

log_ok() {
    echo "yes" >> config.log
}

log_fail() {
    echo "no" >> config.log
}

log_msg() {
    echo "$1" >> config.log
}

cc_check() {
    if [ -z "$3" ]; then
        if [ -z "$1$2" ]; then
            log_check "whether $CC works"
        elif [ -z "$1" ]; then
            log_check "for $2"
        else
            log_check "for $1"
        fi
    elif [ -z "$1" ]; then
        if [ -z "$2" ]; then
            log_check "whether $CC supports $3"
        else
            log_check "whether $CC supports $3 with $2"
        fi
    else
        log_check "for $3 in $1";
    fi
    rm -f conftest.c
    [ -n "$1" ] && echo "#include <$1>" > conftest.c
    echo "int main () { $3 return 0; }" >> conftest.c
    cc_cmd="$CC conftest.c $CFLAGS $2 $LDFLAGSCLI $LDFLAGS -o conftest"
    if $cc_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$cc_cmd"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.c >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

cpp_check() {
    log_check "whether $3 is true"
    rm -f conftest.c
    [ -n "$1" ] && echo "#include <$1>" > conftest.c
    echo -e "#if !($3) \n#error $4 \n#endif " >> conftest.c

    if $CC conftest.c $CFLAGS $2 -E -o conftest >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "--------------------------------------------------"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.c >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

as_check() {
    log_check "whether $AS supports $1"
    echo "$1" > conftest.asm
    if $AS conftest.asm $ASFLAGS $2 -o conftest.o >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$AS conftest.asm $ASFLAGS $2 -o conftest.o"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.asm >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

rc_check() {
    log_check "whether $RC works"
    echo "$1" > conftest.rc
    if [ $compiler = ICL ]; then
        rc_cmd="$RC $RCFLAGS -foconftest.o conftest.rc"
    else
        rc_cmd="$RC $RCFLAGS -o conftest.o conftest.rc"
    fi
    if $rc_cmd >conftest.log 2>&1; then
        res=$?
        log_ok
    else
        res=$?
        log_fail
        log_msg "Failed commandline was:"
        log_msg "--------------------------------------------------"
        log_msg "$rc_cmd"
        cat conftest.log >> config.log
        log_msg "--------------------------------------------------"
        log_msg "Failed program was:"
        log_msg "--------------------------------------------------"
        cat conftest.rc >> config.log
        log_msg "--------------------------------------------------"
    fi
    return $res
}

define() {
    echo "#define $1$([ -n "$2" ] && echo " $2" || echo " 1")" >> config.h
}

die() {
    log_msg "DIED: $@"
    echo "$@"
    exit 1
}

rm -f config.log config.mak config.targets avxsynth.pc conftest*

RELPATH=`dirname "$0"`
SRCPATH=`cd "$RELPATH"; pwd`

[ "$SRCPATH" = "$(pwd)" ] && SRCPATH=.
echo "$SRCPATH" | grep -q "$(pwd)" && die "Build can not be done from a parent directory of source path."
[ -n "$(echo $SRCPATH | grep ' ')" ] && die "Out of tree builds are impossible with whitespace in source path."

prefix='/usr/local'
exec_prefix='${prefix}'
bindir='${exec_prefix}/bin'
libdir='${exec_prefix}/lib/avxsynth'
pcdir='${exec_prefix}/lib/pkgconfig'
includedir='${prefix}/include/avxsynth'
pluginsdir='${libdir}/plugins'
DEVNULL='/dev/null'

autocrop="yes"
framecapture="yes"
subtitle="yes"
ffms2="yes"
frameserver="yes"
avxedit="yes"

cross_prefix=""

debug="yes"
strip="no"
compiler="GNU"

#-O0 is required because of some baked-in header code in avxsynth/core
CFLAGS="$CFLAGS -O0 -Wall -Wno-unused -pipe"
LDFLAGS="$LDFLAGS -lm -ldl"

# parse options

for opt do
    optarg="${opt#*=}"
    case "$opt" in
        --prefix=*)
            prefix="$optarg"
            ;;
        --exec-prefix=*)
            exec_prefix="$optarg"
            ;;
        --bindir=*)
            bindir="$optarg"
            ;;
        --libdir=*)
            libdir="$optarg"
            ;;
        --includedir=*)
            includedir="$optarg"
            ;;
        --disable-autocrop)
            autocrop="no"
            ;;
        --disable-framecapture)
            framecapture="no"
            ;;
        --disable-subtitle)
            subtitle="no"
            ;;
        --disable-ffms2)
            ffms2="no"
            ;;
        --disable-frameserver)
            frameserver="no"
            ;;
        --disable-avxedit)
            avxedit="no"
            ;;
        --extra-cflags=*)
            CFLAGS="$CFLAGS $optarg"
            ;;
        --extra-ldflags=*)
            LDFLAGS="$LDFLAGS $optarg"
            ;;
        --host=*)
            host="$optarg"
            ;;
        --cross-prefix=*)
            cross_prefix="$optarg"
            ;;
        --sysroot=*)
            sysroot="$optarg"
            CFLAGS="$CFLAGS --sysroot=$optarg"
            LDFLAGS="$LDFLAGS --sysroot=$optarg"
            ;;
        --sysroot-rpaths=*)
            rpath="$optarg"
            ;;
        --disable-debug)
            debug="no"
            ;;
        --enable-strip)
            strip="yes"
            ;;
        *)
            echo "Unknown option $opt, ignored"
            ;;
    esac
done

CC="${CC-${cross_prefix}g++}"
AR="${AR-${cross_prefix}ar}"
#RANLIB="${RANLIB-${cross_prefix}ranlib}"
#STRIP="${STRIP-${cross_prefix}strip}"
LD="$CC -o"

if [ "x$host" = x ]; then
    host=`${SRCPATH}/config.guess`
fi
# normalize a triplet into a quadruplet
host=`${SRCPATH}/config.sub $host`

# split $host
host_cpu="${host%%-*}"
host="${host#*-}"
host_vendor="${host%%-*}"
host_os="${host#*-}"

# this is currently not used for anything
case $host_os in
    beos*)
        SYS="BEOS"
        ;;
    darwin*)
        SYS="MACOSX"
        ;;
    freebsd*)
        SYS="FREEBSD"
        ;;
    kfreebsd*-gnu)
        SYS="FREEBSD"
        ;;
    netbsd*)
        SYS="NETBSD"
        ;;
    openbsd*)
        SYS="OPENBSD"
        ;;
    *linux*)
        SYS="LINUX"
        CFLAGS="$CFLAGS -pthread"
        LDFLAGS="$LDFLAGS -pthread"
        ;;
    gnu*)
        SYS="HURD"
        ;;
    cygwin*)
        EXE=".exe"
        if cc_check "" -mno-cygwin; then
            CFLAGS="$CFLAGS -mno-cygwin"
            LDFLAGS="$LDFLAGS -mno-cygwin"
        fi
        if cpp_check "" "" "defined(__CYGWIN32__)" ; then
            SYS="CYGWIN"
        else
            SYS="WINDOWS"
            DEVNULL="NUL"
            RC="${RC-${cross_prefix}windres}"
        fi
        ;;
    mingw*)
        SYS="WINDOWS"
        EXE=".exe"
        DEVNULL="NUL"
        if cc_check pthread.h -lpthreadGC2 "pthread_create(0,0,0,0);" ; then
            LDFLAGS="${LDFLAGS} -lpthreadGC2"
        elif cc_check pthread.h "-lpthreadGC2 -lwsock32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
            LDFLAGS="${LDFLAGS} -lpthreadGC2 -lwsock32"
        elif cc_check pthread.h "-lpthreadGC2 -lws2_32 -DPTW32_STATIC_LIB" "pthread_create(0,0,0,0);" ; then
            LDFLAGS="${LDFLAGS} -lpthreadGC2 -lws2_32"
        fi
        ;;
    sunos*|solaris*)
        SYS="SunOS"
        if cc_check "" /usr/lib/64/values-xpg6.o; then
            LDFLAGS="$LDFLAGS /usr/lib/64/values-xpg6.o"
        else
            LDFLAGS="$LDFLAGS /usr/lib/values-xpg6.o"
        fi
        ;;
    *)
        echo "Unknown system $host, edit the configure"
        ;;
esac

# This is currently not used for anything.
# It is also unknown if this runs on anything but x86(-64) and Linux.
case $host_cpu in
    i*86)
        ARCH="X86"
        if [ $compiler = GNU ]; then
            CFLAGS="-m32 $CFLAGS"
            LDFLAGS="-m32 $LDFLAGS"
        fi
        if [ "$SYS" = WINDOWS -o "$SYS" = CYGWIN ]; then
            LDFLAGS="$LDFLAGS -Wl,--large-address-aware"
            [ $compiler = GNU ] && RCFLAGS="--target=pe-i386 $RCFLAGS"
        fi
        ;;
    x86_64)
        ARCH="X86_64"
        [ $compiler = GNU ] && CFLAGS="-m64 $CFLAGS" && LDFLAGS="-m64 $LDFLAGS"
        if [ "$SYS" = MACOSX ]; then
            if cc_check '' "-arch x86_64"; then
                CFLAGS="$CFLAGS -arch x86_64"
                LDFLAGS="$LDFLAGS -arch x86_64"
            fi
        elif [ "$SYS" = WINDOWS ]; then
            # only the GNU toolchain is inconsistent in prefixing function names with _
            [ $compiler = GNU ] && cc_check "" "-S" && grep -q "_main:" conftest && ASFLAGS="$ASFLAGS -DPREFIX"
            [ $compiler = GNU ] && RCFLAGS="--target=pe-x86-64 $RCFLAGS"
        fi
        ;;
    powerpc|powerpc64)
        ARCH="PPC"
        ;;
    sparc)
        ARCH="SPARC"
        ;;
    mips|mipsel|mips64|mips64el)
        ARCH="MIPS"
        ;;
    arm*)
        ARCH="ARM"
        ;;
    s390|s390x)
        ARCH="S390"
        ;;
    hppa*|parisc*)
        ARCH="PARISC"
        ;;
    ia64)
        ARCH="IA64"
        ;;
    alpha*)
        ARCH="ALPHA"
        ;;
    *)
        ARCH="$(echo $host_cpu | tr a-z A-Z)"
        ;;
esac

# this might need to be updated for dynamic versioning
if  [ "$SYS" = "WINDOWS" -o "$SYS" = "CYGWIN" ]; then
    SONAME=".dll"
elif [ "$SYS" = "MACOSX" ]; then
    SONAME=".dylib"
else
    SONAME=".so"
fi

# ICL has a different suffix, but we don't support it
AR="$AR rcs"
ARNAME=".a"

log_msg "AvxSynth configure script"
if [ -n "$*" ]; then
    msg="Command line options:"
    for i in $@; do
        msg="$msg \"$i\""
    done
    log_msg "$msg"
fi
log_msg ""

log_msg "Target host: $host"
log_msg "Attempting to use C++ compiler: $CC"
log_msg ""

cc_check || die "No working C++ compiler found. See config.log for details."
if [ "$debug" = "yes" ]; then
    CFLAGS="-g $CFLAGS"
    LDFLAGS="-g $LDFLAGS"
fi

if [ "$strip" = "yes" ]; then
    CFLAGS="$CFLAGS -s"
    LDFLAGS="$LDFLAGS -s"
fi

if [ ! -z "$sysroot" ]; then
    echo "Warning: frameserver and AVXEdit can not be built with sysroot"
    log_msg "frameserver and AVXEdit can not be built with sysroot"
    frameserver="no"
    avxedit="no"
fi

log_check "pkg-config"
if ${cross_prefix}pkg-config --help &> conftest.pc; then
    log_ok
else
    log_fail
    die "ERROR: ${cross_prefix}pkg-config not found"
fi

# check for pangocairo and log4cpp -- needed for core
log_check "pangocairo"
if ${cross_prefix}pkg-config --exists pangocairo; then
    log_ok
    PANGOCAIRO_INCLUDES=`${cross_prefix}pkg-config --cflags pangocairo`
    PANGOCAIRO_LIBS=`${cross_prefix}pkg-config --libs pangocairo`
else
    log_fail
    die "ERROR: pangocairo not found"
fi

log_check "log4cpp"
if ${cross_prefix}pkg-config --exists log4cpp; then
    LOG4CPP_INCLUDES=`${cross_prefix}pkg-config --cflags log4cpp`
    LOG4CPP_LIBS=`${cross_prefix}pkg-config --libs log4cpp`
    log_ok
else
    log_fail
    die "ERROR: log4cpp not found"
fi

# framecapture requires libjpeg
if [ "$framecapture" = "yes" ]; then
    log_check "libjpeg"
    cat > conftest.cpp << EOF
#include <stdio.h>
#include <stddef.h>
#include "jpeglib.h"
EOF
    if ! $CC $CFLAGS -c conftest.cpp -o conftest.o 2> /dev/null; then
        log_fail
        echo "Warning: libjpeg required for framecapture, disabling"
        log_msg "libjpeg not found, disabling framecapture"
        framecapture="no"
    else
        log_ok
    fi
fi

# avxffms2 requires ffms2, avcodec, avutil, avformat, swscale, and postproc
if [ "$ffms2" = "yes" ]; then
    log_msg "checking for ffms2 and libav/ffmpeg"
    log_check "ffms2"
    if ! ${cross_prefix}pkg-config --exists ffms2; then
        log_fail
        echo "Warning: ffms2 not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    log_check "libavcodec"
    if ! ${cross_prefix}pkg-config --exists libavcodec; then
        log_fail
        echo "Warning: libavcodec not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    log_check "libavformat"
    if ! ${cross_prefix}pkg-config --exists libavformat; then
        log_fail
        echo "Warning: libavformat not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    log_check "libavutil"
    if ! ${cross_prefix}pkg-config --exists libavutil; then
        log_fail
        echo "Warning: libavutil not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    log_check "libpostproc"
    if ! ${cross_prefix}pkg-config --exists libpostproc; then
        log_fail
        echo "Warning: libpostproc not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    log_check "libswscale"
    if ! ${cross_prefix}pkg-config --exists libswscale; then
        log_fail
        echo "Warning: libswscale not found"
        ffms2_missing_libs="yes"
    else
        log_ok
    fi
    if [ "$ffms2_missing_libs" = "yes" ]; then
        echo "Warning: One or more required libraries for ffms2 support missing, disabling"
        ffms2="no"
    else
        FFMS2_INCLUDES=`${cross_prefix}pkg-config --cflags ffms2 libavcodec libavutil libavformat libswscale libpostproc`
        FFMS2_LIBS=`${cross_prefix}pkg-config --libs ffms2 libavcodec libavutil libavformat libswscale libpostproc`
    fi
fi

# AVXEdit requires QtGUI >= 4
if [ "$avxedit" = "yes" ]; then
    log_check "QtGui >= 4"
    if [ $(echo -e "$(${cross_prefix}pkg-config --modversion QtGui)\n4.0" | sort -rV | head -1) = "4.0" ]; then
        log_fail
        echo "Warning: QtGui too old, requires >4.0, disabling avxedit"
        log_msg "QtGui >= 4 not found, disabling AVXEdit"
        avxedit="no"
    else
        log_ok
        QTGUI_INCLUDES=`${cross_prefix}pkg-config --cflags QtGui`
        QTGUI_LIBS=`${cross_prefix}pkg-config --libs QtGui`
    fi
fi

rm -f conftest*

# generate avxsynth.pc (not tested)
pclibs="-L$libdir -lavxcommon -lavxbtinfncs -lavxsynth -lpthread"

cat > avxsynth.pc << EOF
prefix=$prefix
exec_prefix=$exec_prefix
libdir=$libdir
includedir=$includedir

Name: AvxSynth
Description: AvxSynth (AviSynth for Linux)
Version: 4.0
Libs: $pclibs
Cflags: -I$includedir
EOF

# generate config.mak
cat > config.mak << EOF
SRCPATH=$SRCPATH
prefix=$prefix
exec_prefix=$exec_prefix
bindir=$bindir
libdir=$libdir
pcdir=$pcdir
includedir=$includedir
pluginsdir=$pluginsdir
ARCH=$ARCH
SYS=$SYS
CXX=$CC
CFLAGS=$CFLAGS
LD=$LD
LDFLAGS=$LDFLAGS
AR=$AR
RANLIB=$RANLIB
STRIP=$STRIP
RC=$RC
RCFLAGS=$RCFLAGS
EXE=$EXE
ARNAME=$ARNAME
SONAME=$SONAME

CFLAGS_DYN = -fPIC
LDFLAGS_DYN = -Wl,-Bdynamic -shared

PANGOCAIRO_INCLUDES=$PANGOCAIRO_INCLUDES
PANGOCAIRO_LIBS=$PANGOCAIRO_LIBS
LOG4CPP_INCLUDES=$LOG4CPP_INCLUDES
LOG4CPP_LIBS=$LOG4CPP_LIBS
FFMS2_INCLUDES=$FFMS2_INCLUDES
FFMS2_LIBS=$FFMS2_LIBS
QTGUI_INCLUDES=$QTGUI_INCLUDES
QTGUI_LIBS=$QTGUI_LIBS
EOF

log_msg ""
log_msg "Enabled optional components:"

# generate config.targets
echo 'default: core' >> config.targets
echo 'install: core-install' >> config.targets

if [ "$autocrop" = "yes" ]; then
    echo 'default: autocrop' >> config.targets
    echo 'install: autocrop-install' >> config.targets
    log_msg "autocrop"
fi

if [ "$framecapture" = "yes" ]; then
    echo 'default: avxframecapture' >> config.targets
    echo 'install: avxframecapture-install' >> config.targets
    log_msg "avxframecapture"
fi

if [ "$subtitle" = "yes" ]; then
    echo 'default: avxsubtitle' >> config.targets
    echo 'install: avxsubtitle-install' >> config.targets
    log_msg "avxsubtitle"
fi

if [ "$ffms2" = "yes" ]; then
    echo 'default: avxffms2' >> config.targets
    echo 'install: avxffms2-install' >> config.targets
    log_msg "avxffms2"
fi

if [ "$frameserver" = "yes" ]; then
    echo 'default: avxframeserver' >> config.targets
    echo 'install: avxframeserver-install' >> config.targets
    log_msg "avxFrameServer"
fi

if [ "$avxedit" = "yes" ]; then
    echo 'default: avxedit' >> config.targets
    echo 'install: avxedit-install' >> config.targets
    log_msg "AVXEdit"
fi

# for out-of-tree stuff
[ "$SRCPATH" != "." ] && ln -sf ${SRCPATH}/Makefile ./Makefile
mkdir -p avxcommon/src avxsynth/builtinfunctions/src
mkdir -p avxsynth/builtinfunctions/src/{audio,convert,core,filters,sources}
mkdir -p avxsynth/core/src/{audio,core/parser,filters/conditional,sources/avi}
mkdir -p plugins/{autocrop,avxframecapture,avxsubtitle,avxffms2}/src
mkdir -p apps/avxframeserver/frameserver{app,lib}/src
mkdir -p apps/AVXEdit/src

cat << EOF

Configure completed successfully, see config.log for details:

To build, type "make". To install, type "make install".
Other valid targets: clean distclean test
EOF
